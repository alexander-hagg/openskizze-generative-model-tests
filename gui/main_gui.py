# gui/main_gui.py
import dash
from dash import html, dcc, Output, Input, State
import dash_bootstrap_components as dbc
import plotly.graph_objs as go
import numpy as np
import subprocess
import os

app = dash.Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])

models = ['3D-GAN', 'Voxel VAE', 'Autoregressive Model']

app.layout = dbc.Container([
    dbc.Row([
        dbc.Col(html.H1('Urban Planning Generative Models'), className='text-center')
    ], justify='center'),
    dbc.Row([
        dbc.Col([
            dbc.Label('Select Model'),
            dcc.Dropdown(
                id='model-select',
                options=[{'label': model, 'value': model} for model in models],
                value='3D-GAN'
            )
        ], width=6)
    ], justify='center'),
    dbc.Row([
        dbc.Col([
            dbc.Button('Train Model', id='train-button', color='primary', className='mr-2'),
            dbc.Button('Generate Design', id='generate-button', color='secondary', className='mr-2'),
            dbc.Button('Visualize Design', id='visualize-button', color='success')
        ], width=12, className='my-2')
    ], justify='center'),
    dbc.Row([
        dbc.Col(html.Div(id='status-label'), width=12)
    ]),
    dbc.Row([
        dbc.Col(dcc.Graph(id='voxel-visualization'), width=12)
    ])
], fluid=True)

@app.callback(
    Output('status-label', 'children'),
    Input('train-button', 'n_clicks'),
    Input('generate-button', 'n_clicks'),
    Input('visualize-button', 'n_clicks'),
    State('model-select', 'value'),
    prevent_initial_call=True
)
def update_status(train_clicks, generate_clicks, visualize_clicks, model):
    ctx = dash.callback_context

    if not ctx.triggered:
        return ''
    else:
        button_id = ctx.triggered[0]['prop_id'].split('.')[0]
        status = ''
        if button_id == 'train-button':
            status = f'Training {model}...'
            if model == '3D-GAN':
                subprocess.Popen(['python', 'training/train_gan.py'])
            elif model == 'Voxel VAE':
                subprocess.Popen(['python', 'training/train_vae.py'])
            elif model == 'Autoregressive Model':
                subprocess.Popen(['python', 'training/train_autoregressive.py'])
        elif button_id == 'generate-button':
            status = f'Generating design using {model}...'
            if model == '3D-GAN':
                subprocess.Popen(['python', 'inference/infer_gan.py'])
            elif model == 'Voxel VAE':
                subprocess.Popen(['python', 'inference/infer_vae.py'])
            elif model == 'Autoregressive Model':
                subprocess.Popen(['python', 'inference/infer_autoregressive.py'])
        elif button_id == 'visualize-button':
            status = f'Visualizing design generated by {model}...'
        return status

@app.callback(
    Output('voxel-visualization', 'figure'),
    Input('visualize-button', 'n_clicks'),
    State('model-select', 'value'),
    prevent_initial_call=True
)
def visualize_voxel(n_clicks, model):
    if n_clicks:
        output_dir = 'outputs'
        if model == '3D-GAN':
            filename = os.path.join(output_dir, 'generated_voxel_gan.npy')
        elif model == 'Voxel VAE':
            filename = os.path.join(output_dir, 'generated_voxel_vae.npy')
        elif model == 'Autoregressive Model':
            filename = os.path.join(output_dir, 'generated_voxel_autoregressive.npy')
        
        if os.path.exists(filename):
            voxel = np.load(filename)
            x, y, z = voxel.nonzero()
            fig = go.Figure(data=[go.Scatter3d(
                x=x,
                y=y,
                z=z,
                mode='markers',
                marker=dict(
                    size=3,
                    color=z,
                    colorscale='Viridis',
                )
            )])
            fig.update_layout(scene=dict(aspectmode='data'))
            return fig
        else:
            return go.Figure(layout={'title': 'Voxel data not found. Please generate a design first.'})
    else:
        return go.Figure()

if __name__ == '__main__':
    app.run_server(debug=True)